import numpy as np
from scipy.optimize import brentq
from pathlib import Path

# 参数设置
s_min = 10.0
s_max = 60.0
L_center = 400.0
num_segments = 25
segment_thickness_ratio = 0.05
segment_rotation_angle = 10  # 每段旋转角度 (deg)
hole_radius = 1.0
hole_offset_ratio = 0.85

# 计算对数螺旋参数
def Lc(b):
    return np.sqrt(1 + b**2) * (s_max - s_min) / (2 * b) * (np.exp(2 * np.pi * b) + 1) / (np.exp(2 * np.pi * b) - 1)

b = brentq(lambda bb: Lc(bb) - L_center, 1e-6, 1.0)
a = s_min / (np.exp(2 * np.pi * b) - 1)
theta_end = np.log(s_max / s_min) / b
theta_seg = np.linspace(0, theta_end, num_segments + 1)

# 坐标点
r_edge_seg = a * np.exp(b * theta_seg)
r_center_seg = 0.5 * (r_edge_seg + a * np.exp(b * (theta_seg + 2 * np.pi)))
x_edge_seg = r_edge_seg * np.cos(theta_seg)
y_edge_seg = r_edge_seg * np.sin(theta_seg)
x_ctr_seg = r_center_seg * np.cos(theta_seg)
y_ctr_seg = r_center_seg * np.sin(theta_seg)

# 向量格式化
def fmt(v):
    return "[{:.4f}, {:.4f}]".format(v[0], v[1])

# SCAD Header
scad_code = f"""// Auto-generated by Python
hole_radius = {hole_radius};
hole_offset_ratio = {hole_offset_ratio};
segment_rotation_angle = {segment_rotation_angle};
segment_thickness_ratio = {segment_thickness_ratio};

module cable_holes(r, h) {{
    union() {{
        translate([r, 0, 0]) cylinder(r=hole_radius, h=h*1.1, $fn=24);
        rotate([0,0,120]) translate([r, 0, 0]) cylinder(r=hole_radius, h=h*1.1, $fn=24);
        rotate([0,0,240]) translate([r, 0, 0]) cylinder(r=hole_radius, h=h*1.1, $fn=24);
    }}
}}

module spiral_unit(p0, p1, p2, p3, thickness, rotation_deg, hole_r) {{
    shape = polygon(points=[p0, p1, p2, p3]);
    body = rotate_extrude(angle=rotation_deg, $fn=100) shape;
    difference() {{
        body
        cable_holes(hole_r, thickness);
    }}
}}

union() {{
"""

# 段落构建
for i in range(num_segments):
    p0 = np.array([x_edge_seg[i], y_edge_seg[i]])
    p1 = np.array([x_edge_seg[i+1], y_edge_seg[i+1]])
    p2 = np.array([x_ctr_seg[i+1], y_ctr_seg[i+1]])
    p3 = np.array([x_ctr_seg[i], y_ctr_seg[i]])

    center_dir = p2 - p3
    center_angle = np.arctan2(center_dir[1], center_dir[0]) * 180 / np.pi
    width = np.linalg.norm(p0 - p1)
    thickness = width * segment_thickness_ratio
    hole_r = width * hole_offset_ratio

    p0l = p0 - p3
    p1l = p1 - p3
    p2l = p2 - p3
    p3l = [0, 0]

    scad_code += f"""    translate([{p3[0]:.4f}, {p3[1]:.4f}, 0])
    rotate([0, 0, {center_angle:.4f}])
        spiral_unit({fmt(p0l)}, {fmt(p1l)}, {fmt(p2l)}, {fmt(p3l)}, {thickness:.4f}, {segment_rotation_angle}, {hole_r:.4f});
"""

scad_code += "}\n"

# 写入文件
output_file = Path("spiral_robot_3d_with_holes_fixed.scad")
output_file.write_text(scad_code)
print(f"SCAD file written to: {output_file.resolve()}")
